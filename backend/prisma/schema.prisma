// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  profile   Profile?
  likes     ProfileLike[]
  comments  Comment[]      // User's comments
  commentLikes CommentLike[] // User's comment likes
}

model Profile {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  bio          String?
  hobbies      String?
  socialLinks  Json?
  customHtml   String?
  theme        String? // light/dark/custom
  profilePicture String? // URL to the profile picture
  backgroundImage String? // URL to the background image
  User         User    @relation(fields: [userId], references: [id])
  receivedLikes ProfileLike[]
  likesCount    Int    @default(0)
  viewsCount    Int    @default(0)  // Total number of views
  receivedViews ProfileView[] // Relation to the viewers
  comments      Comment[]      // Comments on this profile
}

model ProfileLike {
  id         Int      @id @default(autoincrement())
  profileId  Int      // The profile that was liked
  userId     Int      // The user who liked the profile
  createdAt  DateTime @default(now()) // When the like was created
  
  // Define relations
  profile    Profile  @relation(fields: [profileId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  // Ensure a user can only like a profile once
  @@unique([profileId, userId])
}

model ProfileView {
  id          Int      @id @default(autoincrement())
  profileId   Int      // The profile that was viewed
  viewerId    Int?     // The user who viewed the profile (null for anonymous)
  ipAddress   String   // Store IP address for anonymous users
  userAgent   String?  // Optional browser/device info
  createdAt   DateTime @default(now()) // When the view occurred
  lastViewedAt DateTime @default(now()) // Last time this user/IP viewed the profile
  viewCount   Int      @default(1)    // How many times this user/IP viewed the profile
  
  // Define relation
  profile     Profile  @relation(fields: [profileId], references: [id])
  
  // Unique constraint to prevent duplicate views
  @@unique([profileId, viewerId, ipAddress])
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  profileId   Int       // The profile this comment is on
  userId      Int       // The user who created the comment
  parentId    Int?      // Null for root comments, populated for replies
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Define relations
  profile     Profile   @relation(fields: [profileId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  likes       CommentLike[]
  likesCount  Int       @default(0)
}

model CommentLike {
  id          Int       @id @default(autoincrement())
  commentId   Int       // The comment that was liked
  userId      Int       // The user who liked the comment
  createdAt   DateTime  @default(now())
  
  // Define relations
  comment     Comment   @relation(fields: [commentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  // Ensure a user can only like a comment once
  @@unique([commentId, userId])
}